def plavis_final():
  modbus_add_signal("192.168.0.9", 255, 402, 2, "MODBUS_1", False)
  modbus_set_signal_update_frequency("MODBUS_1", 10)
  modbus_add_signal("192.168.0.9", 255, 260, 2, "MODBUS_2", False)
  modbus_set_signal_update_frequency("MODBUS_2", 10)
  modbus_add_signal("192.168.0.29", 255, 1036, 1, "MODBUS_3", False)
  modbus_set_signal_update_frequency("MODBUS_3", 10)
  modbus_add_signal("192.168.0.29", 255, 1007, 3, "MODBUS_4", False)
  modbus_set_signal_update_frequency("MODBUS_4", 10)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_tool_voltage(0)
  set_input_actions_to_default()
  modbus_set_runstate_dependent_choice("MODBUS_3",0)
  modbus_set_runstate_dependent_choice("MODBUS_4",0)
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(0.0, [0.0, 0.0, 0.0])
  set_gravity([0.0, 0.0, 9.82])
  global plane_1=[0, 0, 0, 0, 0, 0]
  global feature_plane=[0.94533, -0.20291, -0.00932, 0.00128, -0.00102, -0.06469]
  global Plane_1=p[-0.10879371779744619,-0.7749624733619729,-0.007763904479110137,-0.0010155215865217408,8.01704997202092E-4,-9.124332065346547E-4]
  global Point_1=p[-0.10879371779744619,-0.7749624733619729,-0.007763904479110137,1.171507412366327,1.0552676018788516,-0.9998056944719331]
  global plano_seg_post=p[0.7262933715464818,0.033143115886078836,-0.06968318201858939,0.04138727186802139,-2.251668413328048,-2.139326867460174]
  while (True):
    $ 1 "Robot Program"
    $ 2 "Script: calcularplano.script"
        ###############################################################
        ###############################################################
            def cross_product(u, v):
    
            	u1 = u[0]
            	u2 = u[1]
            	u3 = u[2]
            	v1 = v[0]
            	v2 = v[1]
            	v3 = v[2]
    
            	s = [ (u2*v3-u3*v2), (u3*v1-u1*v3), (u1*v2-u2*v1) ]
    
            	return s
            end
    
    
    
            ###############################################################
            def rotmat2rotvec(rotmat):
    
            	# array to matrix
            	r11 = rotmat[0]
            	r21 = rotmat[1]
            	r31 = rotmat[2]
            	r12 = rotmat[3]
            	r22 = rotmat[4]
            	r32 = rotmat[5]
            	r13 = rotmat[6]
            	r23 = rotmat[7]
            	r33 = rotmat[8]
    
            	# rotation matrix to rotation vector
            	theta = acos((r11+r22+r33-1)/2)
            	sth = sin(theta)
    
            	if ( (theta > d2r(179.99)) or (theta < d2r(-179.99)) ):
            		theta = d2r(180)
            		if (r21 < 0):
            			if (r31 < 0):
            				ux = sqrt((r11+1)/2)
            				uy = -sqrt((r22+1)/2)
            				uz = -sqrt((r33+1)/2)
            			else:
            				ux = sqrt((r11+1)/2)
            				uy = -sqrt((r22+1)/2)
            				uz = sqrt((r33+1)/2)
            			end
            		else:
            			if (r31 < 0):
            				ux = sqrt((r11+1)/2)
            				uy = sqrt((r22+1)/2)
            				uz = -sqrt((r33+1)/2)
            			else:
            				ux = sqrt((r11+1)/2)
            				uy = sqrt((r22+1)/2)
            				uz = sqrt((r33+1)/2)
            			end
            		end
            	else:
            		ux = (r32-r23)/(2*sth)
            		uy = (r13-r31)/(2*sth)
            		uz = (r21-r12)/(2*sth)
            	end
            	rotvec = [(theta*ux),(theta*uy),(theta*uz)]
    
            	return rotvec
            end
    
            ###############################################################
    
            def get_feature_plane(p1, p2, p3):
            	# Step 1. Get the direction vectors
            	d12 = [ p2[0]-p1[0], p2[1]-p1[1], p2[2]-p1[2] ]
            	d13 = [ p3[0]-p1[0], p3[1]-p1[1], p3[2]-p1[2] ]
    
            	# Step 2. Get the direction vector of Z axis by cross product of d12 and d13
            	dz = cross_product(d12, d13)
    
            	# Step 3. Get the X and Z unit direction vectors by normalizing d12 and dz
            	temp = norm(d12)
            	ux = [ d12[0]/temp, d12[1]/temp, d12[2]/temp ]
            	temp = norm(dz)
            	uz = [ dz[0]/temp, dz[1]/temp, dz[2]/temp ]
    
            	# Step 4. Get Y unit direction vector by cross product of uz and ux
            	uy = cross_product(uz, ux)
    
            	# Step 5. Get the rotation matrix from the unit direction vectors
            	rotmat = [ ux[0], ux[1], ux[2], uy[0], uy[1], uy[2], uz[0], uz[1], uz[2] ]
    
            	# Step 6. Get the rotation vector from the rotation matrix
            	rotvec = rotmat2rotvec(rotmat)
    
            	# Step 7. Get the feature plane with the origin at p1 and the frame achieved at step 6
            	feature_plane = [ p1[0], p1[1], p1[2], rotvec[0], rotvec[1], rotvec[2] ]
    
            	return feature_plane
            end
    
            ###############################################################
    
            ###############################################################
    
            ###############################################################
    
            #Matriz de transformation junto con el calculo del punto respecto a la base
            def rot_trans(n1,vector,theta):
                #translation
            	#coordenadas de la pieza respecto del sistema O'
            		h1 = n1[0]
            		h2 = n1[1]
            		h3 = n1[2]
    
            	#Vector de translacion
            		p1 = vector[0]
            		p2 = vector[1]
            		p3 = 0
    
    
    
                ###matriz_trans = [1, 0, 0, p1, 0, 1, 0, p2, 0, 0, 1, p3, 0, 0, 0, 1]
            			matriz_trans = p[p1, p2, p3, 0, 0, 0]
    
                #rotation
            			coseno = cos(theta)
            			seno = sin(theta)
                ###matriz_rot = np.array([[coseno, -seno, 0, 0], [seno, coseno, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]])
            			matriz_rot = p[0, 0, 0, 0, 0, theta]
                ###point_o = np.array([[h1], [h2], [h3], [1]])
            			point_o = p[h1, h2, h3, 0, 0, 0]
    
                ###new_point0 = np.dot(matriz_trans, matriz_rot)
            	###new_point = np.dot(new_point0, point_o)
            			matriz_transf = pose_trans(matriz_trans, pose_trans(matriz_rot, point_o))
    
    
                return matriz_transf
            end
       		### rotacion rx, ry, rz del cobot en radianes
        		rx = 1.57
        		ry = 2.7286
        		rz = 0
    
        ###############################################################
        def trans_ptos(pose1, pose2, pose3):
        		### obtener la rotaciÃ³n de rz respecto a la sistema de base
        		plane=get_feature_plane(pose1,pose2,pose3)
    		global rzadd= plane[5]
    
        		### rotacion rx, ry, rz del cobot en radianes
        		rx = 1.57
        		ry = 2.7286
        		rz = 0 - rzadd
    
        		### Coordenadas de las piezas respecto al AGV
        		pieza1 = p[0.217, 0.32+0.00545, -0.013, 0, 0, 0]
        		pieza2 = p[0.217, 0.343+0.00545, -0.013, 0, 0, 0]
        		pieza4 = p[-0.050, 0.30+0.00545, -0.013, 0, 0, 0]
        		pieza5 = p[-0.050, 0.36+0.00545, -0.013, 0, 0, 0]
        		pieza3 = p[0.217, 0.343+0.00545, 0.100, 0, 0, 0]
    
    
        		### Coordenadas de las piezas moviendo hacia atras respecto del AGV
        		pieza1_atras = p[0.217, 0.20+0.00545, -0.013, 0, 0, 0]
        		pieza2_atras = p[-0.050, 0.36+0.00545, 0.100, 0, 0, 0]
        		pieza3_atras = p[-0.050,  0.23+0.00545, 0.100, 0, 0, 0]
        		pieza4_atras = p[-0.050, 0.23+0.00545, -0.015, 0, 0, 0]
        		pieza5_atras = p[-0.050, 0.13+0.00545, -0.015, 0, 0, 0]
    
    
    			### transformaciones de las posiciones de las piezas a la base
        		pieza1_trans = rot_trans(pieza1, pose1, rzadd)
        		pieza2_trans = rot_trans(pieza2, pose1, rzadd)
        		pieza3_trans = rot_trans(pieza3, pose1, rzadd)
        		pieza4_trans = rot_trans(pieza4, pose1, rzadd)
        		pieza5_trans = rot_trans(pieza5, pose1, rzadd)
    
        		### transformaciones de las posiciones de las piezas moviendo hacia atras a la base
        		pieza1_atras_trans = rot_trans(pieza1_atras, pose1, rzadd)
        		pieza2_atras_trans = rot_trans(pieza2_atras, pose1, rzadd)
        		pieza3_atras_trans = rot_trans(pieza3_atras, pose1, rzadd)
        		pieza4_atras_trans = rot_trans(pieza4_atras, pose1, rzadd)
        		pieza5_atras_trans = rot_trans(pieza5_atras, pose1, rzadd)
    
    			###Global
        		pieza_global = [pieza1_trans[0], pieza1_trans[1], pieza1_trans[2], pieza2_trans[0], pieza2_trans[1], pieza2_trans[2], pieza3_trans[0], pieza3_trans[1], pieza3_trans[2], pieza4_trans[0], pieza4_trans[1], pieza4_trans[2], pieza5_trans[0], pieza5_trans[1], pieza5_trans[2],
        		pieza1_atras_trans[0], pieza1_atras_trans[1], pieza1_atras_trans[2], pieza2_atras_trans[0], pieza2_atras_trans[1], pieza2_atras_trans[2], pieza3_atras_trans[0], pieza3_atras_trans[1], pieza3_atras_trans[2], pieza4_atras_trans[0], pieza4_atras_trans[1], pieza4_atras_trans[2], pieza5_atras_trans[0], pieza5_atras_trans[1], pieza5_atras_trans[2], rz]
    
    
        	return pieza_global
        end
    
    
                ###############################################################
            ###Barrido
            	def calculo_r(Tx, Ty):
            		r = sqrt((Tx*Tx)+(Ty*Ty))
            		return r
            	end
    $ 3 "Script: Barrido_restringido1.script"
       ###coordenadas del primer punto del  iman
    	xo=0.94
    	yo=-0.20
    	zo=-0.0092
    
       ### rotacion rx, ry, rz del cobot en radianes
    		rx = 1.57
    		ry = 2.7286
    		rz = 0
    
    	r = calculo_r(0.01, 0.01)
    
    	###iman1
    		vbr11 = p[xo-r,yo+r,zo,rx,ry,rz] #izquierda, arriba
    		vbr12 = p[xo-r,yo-r,zo,rx,ry,rz] #izquierda, abajo
    		vbr13 = p[xo+r,yo+r,zo,rx,ry,rz] #derecha, arriba
    		vbr14 = p[xo+r,yo-r,zo,rx,ry,rz] #derecha, abaj
    $ 4 "var_11âvbr11"
    global var_11=vbr11
    $ 5 "var_12âvbr12"
    global var_12=vbr12
    $ 6 "var_13âvbr13"
    global var_13=vbr13
    $ 7 "var_14âvbr14"
    global var_14=vbr14
    $ 8 "var_1â0"
    global var_1=0
    $ 9 "var_2â0"
    global var_2=0
    $ 10 "var_3â0"
    global var_3=0
    $ 11 "'1iman'"
    # '1iman'
    $ 12 "Loop digital_in[7]â True "
    thread Thread_while_12():
      while (True):
        $ 13 "MoveJ"
        $ 14 "var_11"
        movej(var_11, a=1.3962634015954636, v=0.17453292519943295)
        $ 15 "var_12"
        movej(var_12, a=1.3962634015954636, v=0.17453292519943295)
        $ 16 "var_11[0]=var_11[0] + 0.001"
        var_11[0]=var_11[0] + 0.001
        $ 17 "var_12[0]=var_12[0] + 0.001"
        var_12[0]=var_12[0] + 0.001
      end
    end
    if (get_standard_digital_in(7) ==   True  ):
      global thread_handler_12=run Thread_while_12()
      while (get_standard_digital_in(7) ==   True  ):
        sync()
      end
      kill thread_handler_12
    end
    $ 18 "Wait: 2.0"
    sleep(2.0)
    $ 19 "pose1âget_actual_tcp_pose()"
    global pose1= get_actual_tcp_pose ()
    $ 20 "Script: Barrido_area_restringido.script"
    ###############################################################
    
       ###coordenadas del primer punto del  iman
    	xo=0.94
    	yo=-0.20
    	zo=-0.0092
    
       ### rotacion rx, ry, rz del cobot en radianes
    		rx = 1.57
    		ry = 2.7286
    		rz = 0
    
    	r = calculo_r(0.01, 0.01)
    
    	###iman2
    		vbr21 = p[pose1[0]+0.06-r,pose1[1]+r,zo,rx,ry,rz] #izquierda, arriba
    		vbr22 = p[pose1[0]+0.06-r,pose1[1]-r,zo,rx,ry,rz] #izquierda, abajo
    		vbr23 = p[pose1[0]+0.06+r,pose1[1]+r,zo,rx,ry,rz] #derecha, arriba
    		vbr24 = p[pose1[0]+0.06+r,pose1[1]-r,zo,rx,ry,rz] #derecha, abajo
    	###iman3
    		vbr31 = p[pose1[0]-r,pose1[1]+0.05+r,zo,rx,ry,rz] #izquierda, arriba
    		vbr32 = p[pose1[0]-r,pose1[1]+0.05-r,zo,rx,ry,rz] #izquierda, abajo
    		vbr33 = p[pose1[0]+r,pose1[1]+0.05+r,zo,rx,ry,rz] #derecha, arriba
    		vbr34 = p[pose1[0]+r,pose1[1]+0.05-r,zo,rx,ry,rz] #derecha, abajo
    $ 21 "var_21âvbr21"
    global var_21=vbr21
    $ 22 "var_22âvbr22"
    global var_22=vbr22
    $ 23 "var_23âvbr23"
    global var_23=vbr23
    $ 24 "var_24âvbr24"
    global var_24=vbr24
    $ 25 "var_31âvbr31"
    global var_31=vbr31
    $ 26 "var_32âvbr32"
    global var_32=vbr32
    $ 27 "var_33âvbr33"
    global var_33=vbr33
    $ 28 "var_34âvbr34"
    global var_34=vbr34
    $ 29 "'2iman'"
    # '2iman'
    $ 30 "MoveJ"
    $ 31 "var_21"
    movej(var_21, a=1.3962634015954636, v=1.0471975511965976)
    $ 32 "Loop digital_in[7]â True "
    thread Thread_while_32():
      while (True):
        $ 33 "MoveJ"
        $ 34 "var_21"
        movej(var_21, a=1.3962634015954636, v=0.17453292519943295)
        $ 35 "var_22"
        movej(var_22, a=1.3962634015954636, v=0.17453292519943295)
        $ 36 "var_21[0]=var_21[0] + 0.001"
        var_21[0]=var_21[0] + 0.001
        $ 37 "var_22[0]=var_22[0] + 0.001"
        var_22[0]=var_22[0] + 0.001
      end
    end
    if (get_standard_digital_in(7) ==   True  ):
      global thread_handler_32=run Thread_while_32()
      while (get_standard_digital_in(7) ==   True  ):
        sync()
      end
      kill thread_handler_32
    end
    $ 38 "Wait: 2.0"
    sleep(2.0)
    $ 39 "pose2âget_actual_tcp_pose()"
    global pose2= get_actual_tcp_pose ()
    $ 40 "'3iman'"
    # '3iman'
    $ 41 "MoveJ"
    $ 42 "var_31"
    movej(var_31, a=1.3962634015954636, v=1.0471975511965976)
    $ 43 "Loop digital_in[7]â True "
    thread Thread_while_43():
      while (True):
        $ 44 "MoveJ"
        $ 45 "var_31"
        movej(var_31, a=1.3962634015954636, v=0.17453292519943295)
        $ 46 "var_32"
        movej(var_32, a=1.3962634015954636, v=0.17453292519943295)
        $ 47 "var_31[0]=var_31[0] + 0.001"
        var_31[0]=var_31[0] + 0.001
        $ 48 "var_32[0]=var_32[0] + 0.001"
        var_32[0]=var_32[0] + 0.001
      end
    end
    if (get_standard_digital_in(7) ==   True  ):
      global thread_handler_43=run Thread_while_43()
      while (get_standard_digital_in(7) ==   True  ):
        sync()
      end
      kill thread_handler_43
    end
    $ 49 "Wait: 2.0"
    sleep(2.0)
    $ 50 "pose3âget_actual_tcp_pose()"
    global pose3= get_actual_tcp_pose ()
    $ 51 "'rotacion'"
    # 'rotacion'
    $ 52 "Script: rz.script"
    plane = get_feature_plane(pose1,pose2,pose3)
    global rzadd1 = -plane[5]
    $ 53 "var_5âp[0,0,0,0,0,rzadd1]"
    global var_5=p[0,0,0,0,0,rzadd1]
    $ 54 "MoveL"
    $ 55 "var_5"
    movel(pose_trans(get_forward_kin(), var_5), a=1.2, v=0.25)
    $ 56 "var_6âget_actual_tcp_pose()"
    global var_6= get_actual_tcp_pose ()
    $ 57 "var_7âp[pose1[0],pose1[1],pose1[2],var_6[3],var_6[4],var_6[5]]"
    global var_7=p[pose1[0],pose1[1],pose1[2],var_6[3],var_6[4],var_6[5]]
    $ 58 "Wait: 2.0"
    sleep(2.0)
    $ 59 "MoveL"
    $ 60 "var_7"
    movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_7), a=1.2, v=0.25)
    $ 61 "'posicionamiento'"
    # 'posicionamiento'
    $ 62 "Script: Posicionamiento_piezas.script"
    	###############################################################################################
    	global pieza_global = trans_ptos(pose1, pose2, pose3)
    	### rotacion rx, ry, rz del cobot en radianes
    	rx = var_6[3]
    	ry = var_6[4]
    	rz = var_6[5]
    
    	###############################################################################################
    
    	### imponemos las rotaciones del cobot a los puntos de las piezas
    	global pieza1_trans = p[pieza_global[0], pieza_global[1], pieza_global[2], rx, ry, rz]
    	global pieza2_trans = p[pieza_global[3], pieza_global[4], pieza_global[5], rx, ry, rz]
    	global pieza3_trans = p[pieza_global[6], pieza_global[7], pieza_global[8], rx, ry, rz]
    	global pieza4_trans = p[pieza_global[9], pieza_global[10], pieza_global[11], rx, ry, rz]
    	global pieza5_trans = p[pieza_global[12], pieza_global[13], pieza_global[14], rx, ry, rz]
    
    	### imponemos las rotaciones del cobot a los puntos de las piezas
    	global pieza1_atras_trans = p[pieza_global[15], pieza_global[16], pieza_global[17], rx, ry, rz]
    	global pieza2_atras_trans = p[pieza_global[18], pieza_global[19], pieza_global[20], rx, ry, rz]
    	global pieza3_atras_trans = p[pieza_global[21], pieza_global[22], pieza_global[23], rx, ry, rz]
    	global pieza4_atras_trans = p[pieza_global[24], pieza_global[25], pieza_global[26], rx, ry, rz]
    	global pieza5_atras_trans = p[pieza_global[27], pieza_global[28], pieza_global[29], rx, ry, rz]
    
    	###############################################################################################
    	### Posiciones para llegar al utillaje
    			global pu1 = p[0.217, 0.32+0.00545, -0.013, 0, 0, 0] #Posicion de inicio
    			global pu2 = p[0.217, 0.343+0.00545, -0.013, 0, 0, 0] #se mueve hacia adelante
    			global pu3 = p[0.217, 0.343+0.00545, 0.100, 0, 0, 0]  #se sube
    			global pu4 = p[0.217, 0.20+0.00545, -0.013, 0, 0, 0]  #se mueve hacia atras
    	### Transformaciones de posiciones de utillaje
    			pu1 = rot_trans(pu1, pose1, rzadd)
    			pu2 = rot_trans(pu2, pose1, rzadd)
    			pu3 = rot_trans(pu3, pose1, rzadd)
    			pu4 = rot_trans(pu4, pose1, rzadd)
    	### Posiciones finales de utillaje
    			pu1 = p[pu1[0], pu1[1], pu1[2], rx, ry, rz]
    			pu2 = p[pu2[0], pu2[1], pu2[2], rx, ry, rz]
    			pu3 = p[pu3[0], pu3[1], pu3[2], rx, ry, rz]
    			pu4 = p[pu4[0], pu4[1], pu4[2], rx, ry, rz]
    $ 63 "Wait: 1.0"
    sleep(1.0)
    $ 64 "Script: Posicionamiento_piezas1.script"
    	####1
    	### Posiciones para llegar a la pieza1
    			global p10 = p[0.245, 0.03+0.00545, 0.1, 0, 0, 0] #Posicion de inicio arriba
    			global p11 = p[0.245, 0.03+0.00545, -0.013, 0, 0, 0] #Posicion de inicio
    			global p12 = p[0.245, 0.108+0.00545, -0.013, 0, 0, 0] #se mueve hacia adelante
    			global p13 = p[0.245, 0.108+0.00545, 0.100, 0, 0, 0]  #se sube
    	### Transformaciones de posiciones de pieza1
    			p10 = rot_trans(p10, pose1, rzadd)
    			p11 = rot_trans(p11, pose1, rzadd)
    			p12 = rot_trans(p12, pose1, rzadd)
    			p13 = rot_trans(p13, pose1, rzadd)
    	### Posiciones finales de pieza1
    			p10 = p[p10[0], p10[1], p10[2], rx, ry, rz]
    			p11 = p[p11[0], p11[1], p11[2], rx, ry, rz]
    			p12 = p[p12[0], p12[1], p12[2], rx, ry, rz]
    			p13 = p[p13[0], p13[1], p13[2], rx, ry, rz]
    	####2
    	### Posiciones para llegar a la pieza2
    			global p20 = p[-0.0587, 0.28+0.00545, 0.1, 0, 0, 0] #Posicion de inicio arriba
    			global p21 = p[-0.0587, 0.28+0.00545, -0.013, 0, 0, 0] #Posicion de inicio
    			global p22 = p[-0.0587, 0.40+0.00545, -0.013, 0, 0, 0] #se mueve hacia adelante
    			global p23 = p[-0.0587, 0.40+0.00545, 0.100, 0, 0, 0]  #se sube
    	### Transformaciones de posiciones de pieza2
    			p20 = rot_trans(p20, pose1, rzadd)
    			p21 = rot_trans(p21, pose1, rzadd)
    			p22 = rot_trans(p22, pose1, rzadd)
    			p23 = rot_trans(p23, pose1, rzadd)
    	### Posiciones finales de pieza2
    			p20 = p[p20[0], p20[1], p20[2], rx, ry, rz]
    			p21 = p[p21[0], p21[1], p21[2], rx, ry, rz]
    			p22 = p[p22[0], p22[1], p22[2], rx, ry, rz]
    			p23 = p[p23[0], p23[1], p23[2], rx, ry, rz]
    $ 65 "Wait: 1.0"
    sleep(1.0)
    $ 66 "Script: Posicionamiento_piezas2.script"
    	####3
    	### Posiciones para llegar a la pieza3
    			global p30 = p[-0.058, 0.28+0.00545, 0.1, 0, 0, 0] #Posicion de inicio arriba
    			global p31 = p[-0.058, 0.28+0.00545, -0.013, 0, 0, 0] #Posicion de inicio
    			global p32 = p[-0.058, 0.36+0.00545, -0.013, 0, 0, 0] #se mueve hacia adelante
    			global p33 = p[-0.058, 0.36+0.00545, 0.100, 0, 0, 0]  #se sube
    	### Transformaciones de posiciones de pieza3
    			p30 = rot_trans(p30, pose1, rzadd)
    			p31 = rot_trans(p31, pose1, rzadd)
    			p32 = rot_trans(p32, pose1, rzadd)
    			p33 = rot_trans(p33, pose1, rzadd)
    	### Posiciones finales de pieza3
    			p30 = p[p30[0], p30[1], p30[2], rx, ry, rz]
    			p31 = p[p31[0], p31[1], p31[2], rx, ry, rz]
    			p32 = p[p32[0], p32[1], p32[2], rx, ry, rz]
    			p33 = p[p33[0], p33[1], p33[2], rx, ry, rz]
    
    	####4
    	### Posiciones para llegar a la pieza4
    			global p40 = p[-0.058, 0.28+0.00545, 0.1, 0, 0, 0] #Posicion de inicio arriba
    			global p41 = p[-0.058, 0.28+0.00545, -0.013, 0, 0, 0] #Posicion de inicio
    			global p42 = p[-0.058, 0.36+0.00545, -0.013, 0, 0, 0] #se mueve hacia adelante
    			global p43 = p[-0.058, 0.36+0.00545, 0.100, 0, 0, 0]  #se sube
    	### Transformaciones de posiciones de pieza4
    			p40 = rot_trans(p40, pose1, rzadd)
    			p41 = rot_trans(p41, pose1, rzadd)
    			p42 = rot_trans(p42, pose1, rzadd)
    			p43 = rot_trans(p43, pose1, rzadd)
    	### Posiciones finales de pieza4
    			p40 = p[p40[0], p40[1], p40[2], rx, ry, rz]
    			p41 = p[p41[0], p41[1], p41[2], rx, ry, rz]
    			p42 = p[p42[0], p42[1], p42[2], rx, ry, rz]
    			p43 = p[p43[0], p43[1], p43[2], rx, ry, rz]
    
    	####5
    	### Posiciones para llegar a la pieza5
    			global p50 = p[-0.058, 0.28+0.00545, 0.1, 0, 0, 0] #Posicion de inicio arriba
    			global p51 = p[-0.058, 0.28+0.00545, -0.013, 0, 0, 0] #Posicion de inicio
    			global p52 = p[-0.058, 0.36+0.00545, -0.013, 0, 0, 0] #se mueve hacia adelante
    			global p53 = p[-0.058, 0.36+0.00545, 0.100, 0, 0, 0]  #se sube
    	### Transformaciones de posiciones de pieza5
    			p50 = rot_trans(p50, pose1, rzadd)
    			p51 = rot_trans(p51, pose1, rzadd)
    			p52 = rot_trans(p52, pose1, rzadd)
    			p53 = rot_trans(p53, pose1, rzadd)
    	### Posiciones finales de pieza5
    			p50 = p[p50[0], p50[1], p50[2], rx, ry, rz]
    			p51 = p[p51[0], p51[1], p51[2], rx, ry, rz]
    			p52 = p[p52[0], p52[1], p52[2], rx, ry, rz]
    			p53 = p[p53[0], p53[1], p53[2], rx, ry, rz]
    
    	### Posiciones finales
    			global pf1 = p[0.217, 0.32+0.00545, -0.013, 0, 0, 0] #Posicion de inicio
    			global pf2 = p[0.217, 0.343+0.00545, -0.013, 0, 0, 0] #se mueve hacia adelante
    			global pf3 = p[0.217, 0.343+0.00545, 0.100, 0, 0, 0]  #se sube
    			global pf4 = p[0.217, 0.20+0.00545, -0.013, 0, 0, 0]  #se mueve hacia atras
    	### Transformaciones de posiciones finales
    			pf1 = rot_trans(pf1, pose1, rzadd)
    			pf2 = rot_trans(pf2, pose1, rzadd)
    			pf3 = rot_trans(pf3, pose1, rzadd)
    			pf4 = rot_trans(pf4, pose1, rzadd)
    	### Posiciones finales transformadas
    			pf1 = p[pf1[0], pf1[1], pf1[2], rx, ry, rz]
    			pf2 = p[pf2[0], pf2[1], pf2[2], rx, ry, rz]
    			pf3 = p[pf3[0], pf3[1], pf3[2], rx, ry, rz]
    			pf4 = p[pf4[0], pf4[1], pf4[2], rx, ry, rz]
    $ 67 "Wait: 1.0"
    sleep(1.0)
    $ 68 "var_4âpieza1_trans"
    global var_4=pieza1_trans
    $ 69 "var_8âpieza2_trans"
    global var_8=pieza2_trans
    $ 70 "var_9âpieza3_trans"
    global var_9=pieza3_trans
    $ 71 "var_15âpieza4_trans"
    global var_15=pieza4_trans
    $ 72 "var_16âpieza5_trans"
    global var_16=pieza5_trans
    $ 73 "var_10âpieza1_atras_trans"
    global var_10=pieza1_atras_trans
    $ 74 "var_17âpieza2_atras_trans"
    global var_17=pieza2_atras_trans
    $ 75 "var_18âpieza3_atras_trans"
    global var_18=pieza3_atras_trans
    $ 76 "var_19âpieza4_atras_trans"
    global var_19=pieza4_atras_trans
    $ 77 "var_20âpieza5_atras_trans"
    global var_20=pieza5_atras_trans
    $ 78 "var_25âp10"
    global var_25=p10
    $ 79 "var_26âp11"
    global var_26=p11
    $ 80 "var_27âp12"
    global var_27=p12
    $ 81 "var_28âp13"
    global var_28=p13
    $ 82 "MoveL"
    $ 83 "var_4"
    movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_4), a=1.2, v=0.06)
    $ 84 "Wait: 2.0"
    sleep(2.0)
    $ 85 "var_8"
    movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_8), a=1.2, v=0.06)
    $ 86 "Wait: 2.0"
    sleep(2.0)
    $ 87 "var_9"
    movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_9), a=1.2, v=0.06)
    $ 88 "Wait: 2.0"
    sleep(2.0)
    $ 89 "Set DO[5]=Encender"
    set_standard_digital_out(5, True)
    $ 90 "'llegar a la pieza'"
    # 'llegar a la pieza'
    $ 91 "n_piezaâ2"
    global n_pieza=2
    $ 92 "If n_piezaâ1"
    if (n_pieza == 1):
      $ 93 "MoveL"
      $ 94 "Waypoint_1"
      movel([0.2172183293345625, -2.4456354918004415, -1.4474841244484162, -0.8226236711969435, 1.5649225937238995, 2.85704703443184], a=1.2, v=0.06)
      $ 95 "Waypoint_2"
      movel([0.21722213666573054, -2.4876519224925433, -1.44574806998272, -0.7824851244809308, 1.565040105674482, 2.8567300827930655], a=1.2, v=0.06)
      $ 96 "Wait: 2.0"
      sleep(2.0)
      $ 97 "var_15"
      movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_15), a=1.2, v=0.06)
      $ 98 "Wait: 2.0"
      sleep(2.0)
      $ 99 "var_16"
      movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_16), a=1.2, v=0.06)
      $ 100 "Wait: 2.0"
      sleep(2.0)
      $ 101 "var_17"
      movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_17), a=1.2, v=0.06)
      $ 102 "Wait: 2.0"
      sleep(2.0)
    else:
      $ 103 "ElseIf n_piezaâ2"
      if (n_pieza == 2):
        $ 104 "MoveL"
        $ 105 "var_25"
        movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_25), a=1.2, v=0.06)
        $ 106 "Wait: 2.0"
        sleep(2.0)
        $ 107 "var_26"
        movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_26), a=1.2, v=0.06)
        $ 108 "Wait: 2.0"
        sleep(2.0)
        $ 109 "var_27"
        movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_27), a=1.2, v=0.06)
        $ 110 "Wait: 2.0"
        sleep(2.0)
        $ 111 "var_28"
        movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_28), a=1.2, v=0.06)
        $ 112 "Wait: 2.0"
        sleep(2.0)
      end
    end
    $ 113 "'punto de recogida'"
    # 'punto de recogida'
    $ 114 "MoveL"
    $ 115 "var_18"
    movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_18), a=1.2, v=0.06)
    $ 116 "Wait: 2.0"
    sleep(2.0)
    $ 117 "var_19"
    movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_19), a=1.2, v=0.06)
    $ 118 "Wait: 2.0"
    sleep(2.0)
    $ 119 "var_20"
    movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_20), a=1.2, v=0.06)
    $ 120 "Wait: 2.0"
    sleep(2.0)
    $ 121 "'volver al utillaje'"
    # 'volver al utillaje'
    $ 122 "MoveL"
    $ 123 "var_9"
    movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_9), a=1.2, v=0.04)
    $ 124 "Wait: 2.0"
    sleep(2.0)
    $ 125 "Set DO[5]=Apagar"
    set_standard_digital_out(5, False)
    $ 126 "MoveL"
    $ 127 "var_8"
    movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_8), a=1.2, v=0.04)
    $ 128 "Wait: 2.0"
    sleep(2.0)
    $ 129 "var_4"
    movel(pose_trans(p[0.0,0.0,0.0,0.0,0.0,0.0], var_4), a=1.2, v=0.04)
    $ 130 "Popup"
    popup("ok", "Mensaje", False, False, blocking=True)
  end
end